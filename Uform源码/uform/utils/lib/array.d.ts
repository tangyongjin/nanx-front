declare type EachArrayIterator<T> = (currentValue: T, key: number) => void | boolean;
declare type EachStringIterator = (currentValue: string, key: number) => void | boolean;
declare type EachObjectIterator<T> = (currentValue: T[keyof T], key: string) => void | boolean;
declare type MemoArrayIterator<T, U> = (previousValue: U, currentValue: T, key: number) => U;
declare type MemoStringIterator<T> = (previousValue: T, currentValue: string, key: number) => T;
declare type MemoObjectIterator<T, U> = (previousValue: U, currentValue: T[keyof T], key: string) => U;
export declare const toArr: (val: any) => any[];
export declare function each(val: string, iterator: EachStringIterator, revert?: boolean): void;
export declare function each<T>(val: T[], iterator: EachArrayIterator<T>, revert?: boolean): void;
export declare function each<T extends object>(val: T, iterator: EachObjectIterator<T>, revert?: boolean): void;
export declare function map(val: string, iterator: EachStringIterator, revert?: boolean): string[];
export declare function map<T>(val: T[], iterator: EachArrayIterator<T>, revert?: boolean): T[];
export declare function map<T extends object>(val: T, iterator: EachObjectIterator<T>, revert?: boolean): object;
export declare function reduce<T, U>(val: T[], iterator: MemoArrayIterator<T, U>, accumulator?: U, revert?: boolean): U;
export declare function reduce<T>(val: string, iterator: MemoStringIterator<T>, accumulator?: T, revert?: boolean): T;
export declare function reduce<T extends object, U>(val: T, iterator: MemoObjectIterator<T, U>, accumulator?: U, revert?: boolean): U;
export declare function every(val: string, iterator: EachStringIterator, revert?: boolean): boolean;
export declare function every<T>(val: T[], iterator: EachArrayIterator<T>, revert?: boolean): boolean;
export declare function every<T extends object>(val: T, iterator: EachObjectIterator<T>, revert?: boolean): boolean;
export declare function some(val: string, iterator: EachStringIterator, revert?: boolean): boolean;
export declare function some<T>(val: T[], iterator: EachArrayIterator<T>, revert?: boolean): boolean;
export declare function some<T extends object>(val: T, iterator: EachObjectIterator<T>, revert?: boolean): boolean;
export declare function findIndex(val: string, iterator: EachStringIterator, revert?: boolean): number;
export declare function findIndex<T>(val: T[], iterator: EachArrayIterator<T>, revert?: boolean): number;
export declare function findIndex<T extends object>(val: T, iterator: EachObjectIterator<T>, revert?: boolean): keyof T;
export declare function find(val: string, iterator: EachStringIterator, revert?: boolean): any;
export declare function find<T>(val: T[], iterator: EachArrayIterator<T>, revert?: boolean): T;
export declare function find<T extends object>(val: T, iterator: EachObjectIterator<T>, revert?: boolean): T[keyof T];
export declare function includes(val: string[], searchElement: string, revert?: boolean): boolean;
export {};
