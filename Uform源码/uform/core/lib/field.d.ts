import { IFieldOptions, IRuleDescription, Path, IField, IFormPathMatcher, IFieldState } from '@uform/types';
import { Form } from './form';
export declare class Field implements IField {
    dirty: boolean;
    dirtyType: string;
    pristine: boolean;
    valid: boolean;
    invalid: boolean;
    visible: boolean;
    display: boolean;
    editable: boolean;
    loading: boolean;
    errors: string[];
    effectErrors: string[];
    name: string;
    value: any;
    hiddenFromParent: boolean;
    shownFromParent: boolean;
    initialValue: any;
    namePath: string[];
    path: string[];
    rules: IRuleDescription[];
    required: boolean;
    props: any;
    lastValidateValue: any;
    private context;
    private removed;
    private destructed;
    private alreadyHiddenBeforeUnmount;
    private fieldbrd;
    private unSubscribeOnChange;
    constructor(context: Form, options: IFieldOptions);
    initialize(options: IFieldOptions): void;
    getInitialValueFromProps(props: any): any;
    getContextEditable(): boolean;
    getEditableFromProps(props: any): boolean;
    getRulesFromProps(props: any): any;
    getRequiredFromProps(props: any): any;
    getEditable(editable: boolean | ((name: string) => boolean)): boolean;
    onChange(fn: (payload: any) => void): void;
    pathEqual(path: Path | IFormPathMatcher): boolean;
    match(path: Path | IFormPathMatcher): boolean;
    publishState(): {
        value: any;
        valid: any;
        invalid: any;
        editable: any;
        visible: any;
        display: any;
        loading: any;
        errors: any;
        pristine: any;
        initialValue: any;
        name: any;
        path: any;
        props: any;
        required: any;
        rules: any;
    };
    syncContextValue(): void;
    subscribe(callback: any): () => any;
    notify(force?: boolean): void;
    unsubscribe(): void;
    changeProps(props: any, force?: boolean): void;
    changeEditable(editable: boolean | ((name: string) => boolean)): void;
    mount(): void;
    unmount(): void;
    checkState(published?: {
        value: any;
        valid: any;
        invalid: any;
        editable: any;
        visible: any;
        display: any;
        loading: any;
        errors: any;
        pristine: any;
        initialValue: any;
        name: any;
        path: any;
        props: any;
        required: any;
        rules: any;
    }): void;
    updateState(reducer: (fieldStte: IFieldState) => void): void;
    destructor(): void;
}
